Index: utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import torch\r\nimport numpy as np\r\nfrom IOUEval import SegmentationMetric\r\nimport logging\r\nimport logging.config\r\nfrom tqdm import tqdm\r\nimport os\r\nimport torch.nn as nn\r\nfrom const import *\r\nimport torch.nn.functional as F\r\nimport cv2\r\nimport torch\r\nimport pickle\r\nfrom model import TwinLite as net\r\nimport torch.backends.cudnn as cudnn\r\nimport DataSet as myDataLoader\r\nfrom argparse import ArgumentParser\r\nimport torch.optim.lr_scheduler\r\nfrom torchvision.transforms import transforms as T\r\nimport cv2\r\nimport numpy as np\r\nfrom tqdm import tqdm\r\nimport torch.nn.functional as F\r\n# from itertools import cycle\r\n\r\ndef cycle(iterable):\r\n    iterator = iter(iterable)\r\n    while True:\r\n        try:\r\n            yield next(iterator)\r\n        except StopIteration:\r\n            iterator = iter(iterable)\r\n\r\ndef resize(\r\n        x: torch.Tensor,\r\n        size: any or None = None,\r\n        scale_factor: list[float] or None = None,\r\n        mode: str = \"bicubic\",\r\n        align_corners: bool or None = False,\r\n) -> torch.Tensor:\r\n    if mode in {\"bilinear\", \"bicubic\"}:\r\n        return F.interpolate(\r\n            x,\r\n            size=size,\r\n            scale_factor=scale_factor,\r\n            mode=mode,\r\n            align_corners=align_corners,\r\n        )\r\n    elif mode in {\"nearest\", \"area\"}:\r\n        return F.interpolate(x, size=size, scale_factor=scale_factor, mode=mode)\r\n    else:\r\n        raise NotImplementedError(f\"resize(mode={mode}) not implemented.\")\r\n\r\n\r\nLOGGING_NAME = \"custom\"\r\n\r\n\r\ndef set_logging(name=LOGGING_NAME, verbose=True):\r\n    # sets up logging for the given name\r\n    rank = int(os.getenv('RANK', -1))  # rank in world for Multi-GPU trainings\r\n    level = logging.INFO if verbose and rank in {-1, 0} else logging.ERROR\r\n    logging.config.dictConfig({\r\n        'version': 1,\r\n        'disable_existing_loggers': False,\r\n        'formatters': {\r\n            name: {\r\n                'format': '%(message)s'}},\r\n        'handlers': {\r\n            name: {\r\n                'class': 'logging.StreamHandler',\r\n                'formatter': name,\r\n                'level': level, }},\r\n        'loggers': {\r\n            name: {\r\n                'level': level,\r\n                'handlers': [name],\r\n                'propagate': False, }}})\r\n\r\n\r\nset_logging(LOGGING_NAME)  # run before defining LOGGER\r\nLOGGER = logging.getLogger(LOGGING_NAME)  # define globally (used in train.py, val.py, detect.py, etc.)\r\n\r\n\r\nclass AverageMeter(object):\r\n    \"\"\"Computes and stores the average and current value\"\"\"\r\n\r\n    def __init__(self):\r\n        self.reset()\r\n\r\n    def reset(self):\r\n        self.val = 0\r\n        self.avg = 0\r\n        self.sum = 0\r\n        self.count = 0\r\n\r\n    def update(self, val, n=1):\r\n        self.val = val\r\n        self.sum += val * n\r\n        self.count += n\r\n        self.avg = self.sum / self.count if self.count != 0 else 0\r\n\r\n    def IntersectionOverUnion(self):\r\n        intersection = np.diag(self.confusionMatrix)\r\n        union = np.sum(self.confusionMatrix, axis=1) + np.sum(self.confusionMatrix, axis=0) - np.diag(\r\n            self.confusionMatrix)\r\n        IoU = intersection / union\r\n        IoU[np.isnan(IoU)] = 0\r\n        return IoU[1]\r\n\r\n    def genConfusionMatrix(self, imgPredict, imgLabel):\r\n        # remove classes from unlabeled pixels in gt image and predict\r\n        # print(imgLabel.shape)\r\n        mask = (imgLabel >= 0) & (imgLabel < self.numClass)\r\n        label = self.numClass * imgLabel[mask] + imgPredict[mask]\r\n        count = np.bincount(label, minlength=self.numClass ** 2)\r\n        confusionMatrix = count.reshape(self.numClass, self.numClass)\r\n        return confusionMatrix\r\n\r\n\r\ndef poly_lr_scheduler(args, optimizer, epoch, power=2):\r\n    lr = round(args.lr * (1 - epoch / args.max_epochs) ** power, 8)\r\n    for param_group in optimizer.param_groups:\r\n        param_group['lr'] = lr\r\n\r\n    return lr\r\n\r\nloss_total = AverageMeter()\r\ntversky_loss_total = AverageMeter()\r\nfocal_loss_total = AverageMeter()\r\nloss_adv_total = AverageMeter()\r\nloss_D_target_total = AverageMeter()\r\nloss_D_source_total = AverageMeter()\r\ndef train(args, source_loader, target_loader, model,model_D, criterion, criterion_bce, optimizer, optimizer_D, epoch):\r\n    device = args.device\r\n    source_label = 0\r\n    target_label = 1\r\n\r\n    loss_total.reset()\r\n    tversky_loss_total.reset()\r\n    focal_loss_total.reset()\r\n    loss_adv_total.reset()\r\n    loss_D_target_total.reset()\r\n    loss_D_source_total.reset()\r\n\r\n    criterion_bce = torch.nn.MSELoss()\r\n\r\n    total_batches = len(source_loader)\r\n    target_loader = cycle(target_loader)\r\n    source_loader = enumerate(source_loader)\r\n    # pbar = enumerate(zip(source_loader, cycle(target_loader)))\r\n    LOGGER.info(('\\n' + '%13s' * 7) % ('Epoch', 'TverskyLoss', 'FocalLoss', 'ADVLoss', 'DsourceLoss', 'DtargetLoss', 'TotalsegLoss' ))\r\n    # pbar = tqdm(pbar, total=total_batches, )\r\n    pbar = (tqdm(source_loader, total=total_batches, bar_format='{l_bar}{bar:10}{r_bar}'))\r\n    for i, (source_data) in pbar:\r\n        optimizer.zero_grad()\r\n        optimizer_D.zero_grad()\r\n\r\n        # train G\r\n        # don't accumulate grads in D\r\n        for param in model_D.parameters():\r\n            param.requires_grad = False\r\n\r\n        # train with source\r\n        (_, source_input, labels) = source_data\r\n        (_, target_input, _) = target_loader.__next__()\r\n        if args.device == 'cuda:0':\r\n            source_input = source_input.cuda().float()\r\n            labels[0] = labels[0].cuda()\r\n            labels[1] = labels[1].cuda()\r\n            target_input = target_input.cuda().float()\r\n\r\n        source_feature, source_output = model(source_input, model_D, 'source')\r\n        source_output_resized = (resize(source_output[0], [512, 512]), resize(source_output[1], [512, 512]))\r\n\r\n        focal_loss, tversky_loss, loss = criterion(source_output_resized, labels)\r\n        loss_total.update(loss,args.batch_size)\r\n        tversky_loss_total.update(tversky_loss,args.batch_size)\r\n        focal_loss_total.update(focal_loss,args.batch_size)\r\n        loss.backward()\r\n\r\n        # train with target\r\n        target_feature, target_output = model(target_input, model_D, 'target')\r\n\r\n        loss_adv = 0\r\n\r\n        D_out = model_D[0](target_feature)\r\n        loss_adv = criterion_bce(D_out, torch.FloatTensor(D_out.data.size()).fill_(source_label).to(device))\r\n        D_out_da = model_D[1](F.softmax(target_output[0], dim=1))\r\n        D_out_ll = model_D[2](F.softmax(target_output[1], dim=1))\r\n\r\n        loss_adv_da = criterion_bce(D_out_da, torch.FloatTensor(D_out_da.data.size()).fill_(source_label).to(device))\r\n        loss_adv_ll = criterion_bce(D_out_ll, torch.FloatTensor(D_out_ll.data.size()).fill_(source_label).to(device))\r\n\r\n        loss_adv = loss_adv_da * 0.1 + loss_adv_ll * 0.1 + loss_adv * 0.1\r\n        loss_adv_total.update(loss_adv,args.batch_size)\r\n        loss_adv.backward()\r\n\r\n        optimizer.step()\r\n\r\n        # train D\r\n        # bring back requires_grad\r\n        for param in model_D.parameters():\r\n            param.requires_grad = True\r\n\r\n        # train with source\r\n        loss_D_source = 0\r\n\r\n        D_out_source = model_D[0](source_feature.detach())\r\n        loss_D_source += criterion_bce(D_out_source,\r\n                                  torch.FloatTensor(D_out_source.data.size()).fill_(source_label).to(device))\r\n        D_out_source_da = model_D[1](F.softmax(source_output[0].detach(), dim=1))\r\n        D_out_source_ll = model_D[2](F.softmax(source_output[1].detach(), dim=1))\r\n\r\n        loss_D_source_da = criterion_bce(D_out_source_da,\r\n                                  torch.FloatTensor(D_out_source_da.data.size()).fill_(source_label).to(device))\r\n        loss_D_source_ll = criterion_bce(D_out_source_ll,\r\n                                  torch.FloatTensor(D_out_source_ll.data.size()).fill_(source_label).to(device))\r\n        loss_D_source = loss_D_source + loss_D_source_da + loss_D_source_ll\r\n        loss_D_source_total.update(loss_D_source,args.batch_size)\r\n        loss_D_source.backward()\r\n\r\n        # train with target\r\n        loss_D_target = 0\r\n        D_out_target = model_D[0](target_feature.detach())\r\n        loss_D_target += criterion_bce(D_out_target,\r\n                                  torch.FloatTensor(D_out_target.data.size()).fill_(target_label).to(device))\r\n        D_out_target_da = model_D[1](F.softmax(target_output[0].detach(), dim=1))\r\n        D_out_target_ll = model_D[2](F.softmax(target_output[1].detach(), dim=1))\r\n        loss_D_target_da = criterion_bce(D_out_target_da,\r\n                                  torch.FloatTensor(D_out_target_da.data.size()).fill_(target_label).to(device))\r\n        loss_D_target_ll = criterion_bce(D_out_target_ll,\r\n                                  torch.FloatTensor(D_out_target_ll.data.size()).fill_(target_label).to(device))\r\n        loss_D_target = loss_D_target + loss_D_target_da + loss_D_target_ll\r\n        loss_D_target_total.update(loss_D_target,args.batch_size)\r\n        loss_D_target.backward()\r\n\r\n        optimizer_D.step()\r\n        pbar.set_description(('%13s' * 1 + '%13.4g' * 6) %\r\n                             (f'{epoch}/{args.max_epochs - 1}', tversky_loss_total.avg, focal_loss_total.avg, loss_adv_total.avg, loss_D_target_total.avg, loss_D_source_total.avg, loss_total.avg))\r\n\r\n\r\ndef dast_train(args, source_loader, target_loader, model,model_D, criterion, criterion_bce, criterion_bce2, optimizer, optimizer_D, epoch):\r\n\r\n    source_label = 0\r\n    target_label = 1\r\n    total_batches = len(source_loader)\r\n    target_loader = cycle(target_loader)\r\n    source_loader = enumerate(source_loader)\r\n\r\n    loss_total = AverageMeter()\r\n    segloss = AverageMeter()\r\n    tversky_loss_total = AverageMeter()\r\n    focal_loss_total = AverageMeter()\r\n    loss_adv_total = AverageMeter()\r\n    loss_D_target_total = AverageMeter()\r\n    loss_D_source_total = AverageMeter()\r\n\r\n    device = args.device\r\n\r\n    # pbar = enumerate(zip(source_loader, cycle(target_loader)))\r\n    LOGGER.info(('\\n' + '%13s' * 5) % ('Epoch', 'AdvLoss', 'loss_D_target', 'loss_D_source', 'TotalLoss'))\r\n    # pbar = tqdm(pbar, total=total_batches, )\r\n    pbar = (tqdm(source_loader, total=total_batches, bar_format='{l_bar}{bar:10}{r_bar}'))\r\n    for i, (source_data) in pbar:\r\n\r\n        optimizer.zero_grad()\r\n        optimizer_D.zero_grad()\r\n\r\n        # train G\r\n        # don't accumulate grads in D\r\n        for param in model_D.parameters():\r\n            param.requires_grad = False\r\n\r\n        # train with source\r\n        (_, source_input, labels) = source_data\r\n        (_, target_input, _) = target_loader.__next__()\r\n        if args.device == 'cuda:0':\r\n            source_input = source_input.cuda().float()\r\n\r\n            labels[0] = labels[0].cuda()\r\n            labels[1] = labels[1].cuda()\r\n            target_input = target_input.cuda().float()\r\n\r\n        source_feature, source_output = model(source_input, model_D, 'source')\r\n        source_output = (resize(source_output[0], [512, 512]), resize(source_output[1], [512, 512]))\r\n\r\n        focal_loss, tversky_loss, loss = criterion(source_output, labels)\r\n\r\n        # train with target\r\n        target_feature, target_output = model(target_input, model_D, 'target')\r\n\r\n        D_out = model_D[0](target_feature)\r\n        loss_adv1 = criterion_bce(D_out, torch.FloatTensor(D_out.data.size()).fill_(source_label).to(device))\r\n        D_out_da = model_D[1](F.softmax(target_output[0], dim=1))\r\n        D_out_ll = model_D[1](F.softmax(target_output[1], dim=1))\r\n\r\n        loss_adv_da = criterion_bce(D_out_da, torch.FloatTensor(D_out_da.data.size()).fill_(source_label).to(device))\r\n        loss_adv_ll = criterion_bce(D_out_ll, torch.FloatTensor(D_out_ll.data.size()).fill_(source_label).to(device))\r\n\r\n        loss_adv = loss_adv_da * 0.1 + loss_adv_ll * 0.1 + loss_adv1 * 0.1\r\n        loss_adv_total.update(loss_adv,args.batch_size)\r\n        total_loss = loss + loss_adv\r\n\r\n        segloss.update(loss,args.batch_size)\r\n        tversky_loss_total.update(tversky_loss,args.batch_size)\r\n        focal_loss_total.update(focal_loss,args.batch_size)\r\n        loss_total.update(total_loss,args.batch_size)\r\n\r\n        total_loss.backward()\r\n        optimizer.step()\r\n\r\n        # train D\r\n        # bring back requires_grad\r\n        for param in model_D.parameters():\r\n            param.requires_grad = True\r\n\r\n        # train with source\r\n\r\n        D_out_source = model_D[0](source_feature.detach())\r\n        loss_D_source1 = criterion_bce(D_out_source,\r\n                                  torch.FloatTensor(D_out_source.data.size()).fill_(source_label).to(device))\r\n        D_out_source_da = model_D[1](F.softmax(source_output[0].detach(), dim=1))\r\n        D_out_source_ll = model_D[2](F.softmax(source_output[1].detach(), dim=1))\r\n\r\n        loss_D_source_da = criterion_bce(D_out_source_da,\r\n                                  torch.FloatTensor(D_out_source_da.data.size()).fill_(source_label).to(device))\r\n        loss_D_source_ll = criterion_bce(D_out_source_ll,\r\n                                  torch.FloatTensor(D_out_source_ll.data.size()).fill_(source_label).to(device))\r\n        loss_D_source = loss_D_source1 + loss_D_source_da + loss_D_source_ll\r\n        loss_D_source_total.update(loss_D_source,args.batch_size)\r\n        loss_D_source.backward()\r\n\r\n        # train with target\r\n        D_out_target = model_D[0](target_feature.detach())\r\n        loss_D_target1 = criterion_bce(D_out_target,\r\n                                  torch.FloatTensor(D_out_target.data.size()).fill_(target_label).to(device))\r\n        D_out_target_da = model_D[1](F.softmax(target_output[0].detach(), dim=1))\r\n        D_out_target_ll = model_D[2](F.softmax(target_output[1].detach(), dim=1))\r\n        weight_target_da = criterion_bce2(D_out_target_da,\r\n                                  torch.FloatTensor(D_out_target_da.data.size()).fill_(target_label).to(device))\r\n        weight_target_ll = criterion_bce2(D_out_target_ll,\r\n                                  torch.FloatTensor(D_out_target_ll.data.size()).fill_(target_label).to(device))\r\n        loss_D_target_da = weight_target_da.mean()\r\n        loss_D_target_ll = weight_target_ll.mean()\r\n        loss_D_target = loss_D_target1 + loss_D_target_da + loss_D_target_ll\r\n        loss_D_target_total.update(loss_D_target,args.batch_size)\r\n        loss_D_target.backward()\r\n\r\n        optimizer_D.step()\r\n        pbar.set_description(('%13s' * 1 + '%13.4g' * 4) %\r\n                             (f'{epoch}/{args.max_epochs - 1}', loss_adv_total.avg, loss_D_target_total.avg, loss_D_source_total.avg, loss_total.avg))\r\n\r\n\r\n\r\n\r\n\r\n\r\n@torch.no_grad()\r\ndef val(val_loader, model):\r\n    # os.mkdir('/kaggle/working/outputs')\r\n\r\n    model.eval()\r\n\r\n    DA = SegmentationMetric(2)\r\n    LL = SegmentationMetric(2)\r\n\r\n    da_acc_seg = AverageMeter()\r\n    da_IoU_seg = AverageMeter()\r\n    da_mIoU_seg = AverageMeter()\r\n\r\n    ll_acc_seg = AverageMeter()\r\n    ll_IoU_seg = AverageMeter()\r\n    ll_mIoU_seg = AverageMeter()\r\n\r\n    total_batches = len(val_loader)\r\n    pbar = enumerate(val_loader)\r\n    pbar = tqdm(pbar, total=total_batches)\r\n    for i, (_, input, target) in pbar:\r\n        input = input.cuda().float()\r\n        # target = target.cuda()\r\n\r\n        input_var = input\r\n        target_var = target\r\n\r\n        with torch.no_grad():\r\n            _, output = model(input_var, None, 'source')\r\n            # output = model(input_var)\r\n            output = (resize(output[0], [512, 512]), resize(output[1], [512, 512]))\r\n\r\n        out_da, out_ll = output\r\n        target_da, target_ll = target\r\n\r\n        _, da_gt = torch.max(target_da, 1)\r\n        _, da_predict = torch.max(out_da, 1)\r\n\r\n        _, ll_predict = torch.max(out_ll, 1)\r\n        _, ll_gt = torch.max(target_ll, 1)\r\n\r\n        DA.reset()\r\n        DA.addBatch(da_predict.cpu(), da_gt.cpu())\r\n\r\n        da_acc = DA.pixelAccuracy()\r\n        da_IoU = DA.IntersectionOverUnion()\r\n        da_mIoU = DA.meanIntersectionOverUnion()\r\n\r\n        da_acc_seg.update(da_acc, input.size(0))\r\n        da_IoU_seg.update(da_IoU, input.size(0))\r\n        da_mIoU_seg.update(da_mIoU, input.size(0))\r\n\r\n        LL.reset()\r\n        LL.addBatch(ll_predict.cpu(), ll_gt.cpu())\r\n\r\n        ll_acc = LL.pixelAccuracy()\r\n        ll_IoU = LL.IntersectionOverUnion()\r\n        ll_mIoU = LL.meanIntersectionOverUnion()\r\n\r\n        ll_acc_seg.update(ll_acc, input.size(0))\r\n        ll_IoU_seg.update(ll_IoU, input.size(0))\r\n        ll_mIoU_seg.update(ll_mIoU, input.size(0))\r\n\r\n    da_segment_result = (da_acc_seg.avg, da_IoU_seg.avg, da_mIoU_seg.avg)\r\n    ll_segment_result = (ll_acc_seg.avg, ll_IoU_seg.avg, ll_mIoU_seg.avg)\r\n    return da_segment_result, ll_segment_result\r\n\r\n\r\ndef valid(mymodel, Dataset):\r\n    '''\r\n    Main function for trainign and validation\r\n    :param args: global arguments\r\n    :return: None\r\n    '''\r\n\r\n    # load the model\r\n    model = mymodel.eval()\r\n    cuda_available = torch.cuda.is_available()\r\n    if cuda_available:\r\n        model = torch.nn.DataParallel(model)\r\n        model = model.cuda()\r\n        cudnn.benchmark = True\r\n\r\n    valLoader = torch.utils.data.DataLoader(\r\n        Dataset,\r\n        batch_size=2, shuffle=False, num_workers=1, pin_memory=True)\r\n\r\n    total_paramters = netParams(model)\r\n    print('Total network parameters: ' + str(total_paramters))\r\n\r\n    #     model.load_state_dict(torch.load(PATH))\r\n    model.eval()\r\n    #     example = torch.rand(2, 3, 512, 512).cuda()\r\n    #     model = torch.jit.trace(model, example)\r\n    da_segment_results, ll_segment_results = val(valLoader, model)\r\n\r\n    msg = '\\n Driving area Segment: Acc({da_seg_acc:.3f})    IOU ({da_seg_iou:.3f})    mIOU({da_seg_miou:.3f})\\n'.format(\r\n        da_seg_acc=da_segment_results[0], da_seg_iou=da_segment_results[1], da_seg_miou=da_segment_results[2],\r\n        ll_seg_acc=ll_segment_results[0], ll_seg_iou=ll_segment_results[1], ll_seg_miou=ll_segment_results[2])\r\n    print(msg)\r\n\r\n    msg2 = '\\n lane line detection: Acc({ll_seg_acc:.3f})    IOU ({ll_seg_iou:.3f})    mIOU({ll_seg_miou:.3f})\\n'.format(\r\n        da_seg_acc=da_segment_results[0], da_seg_iou=da_segment_results[1], da_seg_miou=da_segment_results[2],\r\n        ll_seg_acc=ll_segment_results[0], ll_seg_iou=ll_segment_results[1], ll_seg_miou=ll_segment_results[2])\r\n    print(msg2)\r\n\r\n\r\ndef save_checkpoint(state, filenameCheckpoint='checkpoint.pth.tar'):\r\n    torch.save(state, filenameCheckpoint)\r\n\r\n\r\ndef netParams(model):\r\n    return np.sum([np.prod(parameter.size()) for parameter in model.parameters()])\r\n\r\n\r\ndef save_res(i, vis_idx, input, out_da, out_ll, target_da, target_ll):\r\n    x = input\r\n    seg = target_da\r\n    ll = target_ll\r\n\r\n    y_seg_pred = out_da\r\n    y_ll_pred = out_ll\r\n\r\n    vis_pred1 = (y_seg_pred)[vis_idx][1].detach().cpu().numpy()\r\n    vis_pred2 = (y_seg_pred)[vis_idx][0].detach().cpu().numpy()\r\n    vis_pred3 = (y_ll_pred)[vis_idx][1].detach().cpu().numpy()\r\n    vis_pred4 = (y_ll_pred)[vis_idx][0].detach().cpu().numpy()\r\n\r\n    vis_logit = (y_seg_pred)[vis_idx].argmax(0).detach().cpu().numpy()\r\n    vis_logit2 = (y_ll_pred)[vis_idx].argmax(0).detach().cpu().numpy()\r\n\r\n    vis_input = invTrans(x[vis_idx]).permute(1, 2, 0).cpu().numpy()\r\n    vis_input = cv2.cvtColor(vis_input, cv2.COLOR_BGR2RGB)\r\n\r\n    vis_label1 = seg[vis_idx][1].long().detach().cpu().numpy()\r\n    vis_label2 = ll[vis_idx][1].long().detach().cpu().numpy()\r\n\r\n    viss = [vis_pred1, vis_pred2, vis_pred3, vis_pred4, vis_logit, vis_logit2, vis_label1, vis_label2, vis_input]\r\n    #     show_grays(viss,3)\r\n\r\n    img_det1 = show_seg_result(vis_input * 255, (vis_logit, vis_logit2), 0, 0, is_demo=True)\r\n    img_det2 = show_seg_result(vis_input * 255, (vis_label1, vis_label2), 0, 0, is_demo=True)\r\n\r\n    filename1 = f'savedImage1_{i}_{vis_idx}.jpg'\r\n    filename2 = f'savedImage2_{i}_{vis_idx}.jpg'\r\n\r\n    img_det1 = cv2.cvtColor(img_det1, cv2.COLOR_RGB2BGR)\r\n    img_det2 = cv2.cvtColor(img_det2, cv2.COLOR_RGB2BGR)\r\n\r\n    # Using cv2.imwrite() method\r\n    # Saving the image\r\n    cv2.imwrite(f'/kaggle/working/outputs/{filename1}', img_det1)\r\n    cv2.imwrite(f'/kaggle/working/outputs/{filename2}', img_det2)\r\n\r\n\r\ndef pseudo_label_maker(dataloader, model):\r\n    # model = create_seg_model('b0','bdd',weight_url='/kaggle/working/model_0.pth')\r\n    if not os.path.isdir('/kaggle/working/iadd/ll'):\r\n        os.mkdir('/kaggle/working/iadd/ll')\r\n        print('making ll folder')\r\n    if not os.path.isdir('/kaggle/working/iadd/da'):\r\n        os.mkdir('/kaggle/working/iadd/da')\r\n        print('making da folder')\r\n\r\n    model = model.cuda()\r\n    model.eval()\r\n    tbar = tqdm(dataloader)\r\n    #     loop  = tqdm(names)\r\n\r\n    #     bch=iter(pseudo_data)\r\n    with torch.no_grad():\r\n        for name, image, shape in tbar:\r\n            #             print(name)\r\n            #         image=cv2.imread(name)\r\n            #         img = image.astype(np.uint8)\r\n            #         img = cv2.resize(img, [512,512], interpolation=cv2.INTER_LINEAR)\r\n            #         img=transform(img).unsqueeze(0).cuda()\r\n            y_da_pred, y_ll_pred = model(image.cuda())\r\n\r\n            H_, W_ = shape[0], shape[1]\r\n            y_da_pred = resize(y_da_pred, [H_, W_])\r\n            y_ll_pred = resize(y_ll_pred, [H_, W_])\r\n\r\n            y_da_pred = y_da_pred[0].argmax(0).detach().cpu().numpy()\r\n            y_ll_pred = y_ll_pred[0].argmax(0).detach().cpu().numpy()\r\n\r\n            y_da_pred = y_da_pred.astype(np.uint8) * 255\r\n            y_ll_pred = y_ll_pred.astype(np.uint8) * 255\r\n\r\n            nam = name[0].split('/')[-1]\r\n            da_name = '/kaggle/working/iadd/da/' + nam.replace('.jpg', '.png')\r\n            ll_name = '/kaggle/working/iadd/ll/' + nam.replace('.jpg', '.png')\r\n\r\n            cv2.imwrite(da_name, y_da_pred)\r\n            cv2.imwrite(ll_name, y_ll_pred)\r\n            tbar.set_description('pseudo relabeling: ')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils.py b/utils.py
--- a/utils.py	
+++ b/utils.py	
@@ -127,10 +127,8 @@
 loss_total = AverageMeter()
 tversky_loss_total = AverageMeter()
 focal_loss_total = AverageMeter()
-loss_adv_total = AverageMeter()
-loss_D_target_total = AverageMeter()
-loss_D_source_total = AverageMeter()
-def train(args, source_loader, target_loader, model,model_D, criterion, criterion_bce, optimizer, optimizer_D, epoch):
+
+def train(args, train_loader, model, criterion, optimizer, epoch):
     device = args.device
     source_label = 0
     target_label = 1
@@ -138,36 +136,27 @@
     loss_total.reset()
     tversky_loss_total.reset()
     focal_loss_total.reset()
-    loss_adv_total.reset()
-    loss_D_target_total.reset()
-    loss_D_source_total.reset()
 
     criterion_bce = torch.nn.MSELoss()
 
-    total_batches = len(source_loader)
-    target_loader = cycle(target_loader)
-    source_loader = enumerate(source_loader)
+    total_batches = len(train_loader)
+    # target_loader = cycle(target_loader)
+    source_loader = enumerate(train_loader)
     # pbar = enumerate(zip(source_loader, cycle(target_loader)))
     LOGGER.info(('\n' + '%13s' * 7) % ('Epoch', 'TverskyLoss', 'FocalLoss', 'ADVLoss', 'DsourceLoss', 'DtargetLoss', 'TotalsegLoss' ))
     # pbar = tqdm(pbar, total=total_batches, )
     pbar = (tqdm(source_loader, total=total_batches, bar_format='{l_bar}{bar:10}{r_bar}'))
     for i, (source_data) in pbar:
         optimizer.zero_grad()
-        optimizer_D.zero_grad()
 
         # train G
-        # don't accumulate grads in D
-        for param in model_D.parameters():
-            param.requires_grad = False
 
         # train with source
         (_, source_input, labels) = source_data
-        (_, target_input, _) = target_loader.__next__()
         if args.device == 'cuda:0':
             source_input = source_input.cuda().float()
             labels[0] = labels[0].cuda()
             labels[1] = labels[1].cuda()
-            target_input = target_input.cuda().float()
 
         source_feature, source_output = model(source_input, model_D, 'source')
         source_output_resized = (resize(source_output[0], [512, 512]), resize(source_output[1], [512, 512]))
@@ -292,7 +281,7 @@
         D_out = model_D[0](target_feature)
         loss_adv1 = criterion_bce(D_out, torch.FloatTensor(D_out.data.size()).fill_(source_label).to(device))
         D_out_da = model_D[1](F.softmax(target_output[0], dim=1))
-        D_out_ll = model_D[1](F.softmax(target_output[1], dim=1))
+        D_out_ll = model_D[1](F.softm ax(target_output[1], dim=1))
 
         loss_adv_da = criterion_bce(D_out_da, torch.FloatTensor(D_out_da.data.size()).fill_(source_label).to(device))
         loss_adv_ll = criterion_bce(D_out_ll, torch.FloatTensor(D_out_ll.data.size()).fill_(source_label).to(device))
Index: DataSet.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import torch\r\nimport cv2\r\nimport torch.utils.data\r\nimport torchvision.transforms as transforms\r\nimport numpy as np\r\nimport os\r\nimport random\r\nimport math\r\n\r\ndef augment_hsv(img, hgain=0.015, sgain=0.7, vgain=0.4):\r\n    \"\"\"change color hue, saturation, value\"\"\"\r\n    r = np.random.uniform(-1, 1, 3) * [hgain, sgain, vgain] + 1  # random gains\r\n    hue, sat, val = cv2.split(cv2.cvtColor(img, cv2.COLOR_BGR2HSV))\r\n    dtype = img.dtype  # uint8\r\n\r\n    x = np.arange(0, 256, dtype=np.int16)\r\n    lut_hue = ((x * r[0]) % 180).astype(dtype)\r\n    lut_sat = np.clip(x * r[1], 0, 255).astype(dtype)\r\n    lut_val = np.clip(x * r[2], 0, 255).astype(dtype)\r\n\r\n    img_hsv = cv2.merge((cv2.LUT(hue, lut_hue), cv2.LUT(sat, lut_sat), cv2.LUT(val, lut_val))).astype(dtype)\r\n    cv2.cvtColor(img_hsv, cv2.COLOR_HSV2BGR, dst=img)  # no return needed\r\ndef random_perspective(combination,  degrees=10, translate=.1, scale=.1, shear=10, perspective=0.0, border=(0, 0)):\r\n    \"\"\"combination of img transform\"\"\"\r\n    # torchvision.transforms.RandomAffine(degrees=(-10, 10), translate=(.1, .1), scale=(.9, 1.1), shear=(-10, 10))\r\n    # targets = [cls, xyxy]\r\n    img, gray, line = combination\r\n    height = img.shape[0] + border[0] * 2  # shape(h,w,c)\r\n    width = img.shape[1] + border[1] * 2\r\n\r\n    # Center\r\n    C = np.eye(3)\r\n    C[0, 2] = -img.shape[1] / 2  # x translation (pixels)\r\n    C[1, 2] = -img.shape[0] / 2  # y translation (pixels)\r\n\r\n    # Perspective\r\n    P = np.eye(3)\r\n    P[2, 0] = random.uniform(-perspective, perspective)  # x perspective (about y)\r\n    P[2, 1] = random.uniform(-perspective, perspective)  # y perspective (about x)\r\n\r\n    # Rotation and Scale\r\n    R = np.eye(3)\r\n    a = random.uniform(-degrees, degrees)\r\n    # a += random.choice([-180, -90, 0, 90])  # add 90deg rotations to small rotations\r\n    s = random.uniform(1 - scale, 1 + scale)\r\n    # s = 2 ** random.uniform(-scale, scale)\r\n    R[:2] = cv2.getRotationMatrix2D(angle=a, center=(0, 0), scale=s)\r\n\r\n    # Shear\r\n    S = np.eye(3)\r\n    S[0, 1] = math.tan(random.uniform(-shear, shear) * math.pi / 180)  # x shear (deg)\r\n    S[1, 0] = math.tan(random.uniform(-shear, shear) * math.pi / 180)  # y shear (deg)\r\n\r\n    # Translation\r\n    T = np.eye(3)\r\n    T[0, 2] = random.uniform(0.5 - translate, 0.5 + translate) * width  # x translation (pixels)\r\n    T[1, 2] = random.uniform(0.5 - translate, 0.5 + translate) * height  # y translation (pixels)\r\n\r\n    # Combined rotation matrix\r\n    M = T @ S @ R @ P @ C  # order of operations (right to left) is IMPORTANT\r\n    if (border[0] != 0) or (border[1] != 0) or (M != np.eye(3)).any():  # image changed\r\n        if perspective:\r\n            img = cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(114, 114, 114))\r\n            gray = cv2.warpPerspective(gray, M, dsize=(width, height), borderValue=0)\r\n            line = cv2.warpPerspective(line, M, dsize=(width, height), borderValue=0)\r\n        else:  # affine\r\n            img = cv2.warpAffine(img, M[:2], dsize=(width, height), borderValue=(114, 114, 114))\r\n            gray = cv2.warpAffine(gray, M[:2], dsize=(width, height), borderValue=0)\r\n            line = cv2.warpAffine(line, M[:2], dsize=(width, height), borderValue=0)\r\n\r\n\r\n\r\n    combination = (img, gray, line)\r\n    return combination\r\n\r\ndef random_perspective2(combination,  degrees=10, translate=.1, scale=.1, shear=10, perspective=0.0, border=(0, 0)):\r\n    \"\"\"combination of img transform\"\"\"\r\n    # torchvision.transforms.RandomAffine(degrees=(-10, 10), translate=(.1, .1), scale=(.9, 1.1), shear=(-10, 10))\r\n    # targets = [cls, xyxy]\r\n    img = combination\r\n    height = img.shape[0] + border[0] * 2  # shape(h,w,c)\r\n    width = img.shape[1] + border[1] * 2\r\n\r\n    # Center\r\n    C = np.eye(3)\r\n    C[0, 2] = -img.shape[1] / 2  # x translation (pixels)\r\n    C[1, 2] = -img.shape[0] / 2  # y translation (pixels)\r\n\r\n    # Perspective\r\n    P = np.eye(3)\r\n    P[2, 0] = random.uniform(-perspective, perspective)  # x perspective (about y)\r\n    P[2, 1] = random.uniform(-perspective, perspective)  # y perspective (about x)\r\n\r\n    # Rotation and Scale\r\n    R = np.eye(3)\r\n    a = random.uniform(-degrees, degrees)\r\n    # a += random.choice([-180, -90, 0, 90])  # add 90deg rotations to small rotations\r\n    s = random.uniform(1 - scale, 1 + scale)\r\n    # s = 2 ** random.uniform(-scale, scale)\r\n    R[:2] = cv2.getRotationMatrix2D(angle=a, center=(0, 0), scale=s)\r\n\r\n    # Shear\r\n    S = np.eye(3)\r\n    S[0, 1] = math.tan(random.uniform(-shear, shear) * math.pi / 180)  # x shear (deg)\r\n    S[1, 0] = math.tan(random.uniform(-shear, shear) * math.pi / 180)  # y shear (deg)\r\n\r\n    # Translation\r\n    T = np.eye(3)\r\n    T[0, 2] = random.uniform(0.5 - translate, 0.5 + translate) * width  # x translation (pixels)\r\n    T[1, 2] = random.uniform(0.5 - translate, 0.5 + translate) * height  # y translation (pixels)\r\n\r\n    # Combined rotation matrix\r\n    M = T @ S @ R @ P @ C  # order of operations (right to left) is IMPORTANT\r\n    if (border[0] != 0) or (border[1] != 0) or (M != np.eye(3)).any():  # image changed\r\n        if perspective:\r\n            img = cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(114, 114, 114))\r\n\r\n        else:  # affine\r\n            img = cv2.warpAffine(img, M[:2], dsize=(width, height), borderValue=(114, 114, 114))\r\n\r\n\r\n\r\n\r\n    combination = img\r\n    return combination\r\n\r\n\r\nclass MyDataset(torch.utils.data.Dataset):\r\n    '''\r\n    Class to load the dataset\r\n    '''\r\n    def __init__(self, transform=None,valid=False,engin='kaggle',data='bdd'):\r\n        '''\r\n        :param imList: image list (Note that these lists have been processed and pickled using the loadData.py)\r\n        :param labelList: label list (Note that these lists have been processed and pickled using the loadData.py)\r\n        :param transform: Type of transformation. SEe Transforms.py for supported transformations\r\n        '''\r\n\r\n        self.transform = transform\r\n        self.Tensor = transforms.ToTensor()\r\n        self.valid = valid\r\n        self.engin = engin\r\n        self.data = data\r\n\r\n        if self.data == 'bdd':\r\n            if self.engin == 'kaggle': #bdd dataset on kaggle engine\r\n                if valid:\r\n                    self.root = '/kaggle/input/bdd100k-dataset/bdd100k/bdd100k/images/100k/val'\r\n                    self.names = os.listdir(self.root)\r\n                else:\r\n                    self.root = '/kaggle/input/bdd100k-dataset/bdd100k/bdd100k/images/100k/train'\r\n                    self.names = os.listdir(self.root)[:1500]  # [:1000]\r\n            else:                       #bdd dataset on colab engine\r\n                if valid:\r\n                    self.root = '/content/data/bdd100k/bdd100k/images/100k/val'\r\n                    self.names = os.listdir(self.root)\r\n                else:\r\n                    self.root = '/content/data/bdd100k/bdd100k/images/100k/train'\r\n                    self.names = os.listdir(self.root)#[:1500]\r\n        elif self.data == 'IADD':\r\n            if self.engin == 'kaggle':  #IADD dataset on kaggle engine\r\n                if valid:\r\n                    self.root = '/kaggle/working/IADD/IADDv6/val/img'\r\n                    self.names = os.listdir(self.root)\r\n                else:\r\n                    self.root = '/kaggle/working/iadd/img/content/train_p1_unlabeled'\r\n                    self.names = os.listdir(self.root)[:1000]\r\n            else:                        #IADD dataset on colab engine\r\n                if valid:\r\n                    self.root = '/content/IADD/IADDv6/val/img'\r\n                    self.names = os.listdir(self.root)\r\n                else:\r\n                    self.root = '/content/iadd/img/content/train_p1_unlabeled'\r\n                    self.names = os.listdir(self.root)#[:1000]\r\n\r\n\r\n    def __len__(self):\r\n        return len(self.names)\r\n\r\n    def __getitem__(self, idx):\r\n        '''\r\n\r\n        :param idx: Index of the image file\r\n        :return: returns the image and corresponding label file.\r\n        '''\r\n        W_=512\r\n        H_=512\r\n        image_name=os.path.join(self.root,self.names[idx])\r\n\r\n        image = cv2.imread(image_name)\r\n        if self.data == 'bdd':\r\n            if self.engin == 'kaggle':\r\n                label1 = cv2.imread(image_name.replace(\"input/bdd100k-dataset/bdd100k/bdd100k/images/100k\",\"working/labels/bdd_seg_gt\").replace(\"jpg\",\"png\"), 0)\r\n                label2 = cv2.imread(image_name.replace(\"input/bdd100k-dataset/bdd100k/bdd100k/images/100k\",\"working/labels/bdd_lane_gt\").replace(\"jpg\",\"png\"), 0)\r\n            else:\r\n                label1 = cv2.imread(image_name.replace(\"bdd100k/bdd100k/images/100k\", \"labels/bdd_seg_gt\").replace(\"jpg\", \"png\"), 0)\r\n                label2 = cv2.imread(image_name.replace(\"bdd100k/bdd100k/images/100k\", \"labels/bdd_lane_gt\").replace(\"jpg\", \"png\"), 0)\r\n        elif self.data == 'IADD':\r\n            if self.valid:\r\n                label1 = cv2.imread(image_name.replace(\"img\", \"drivable\").replace(\".jpg\", \".png\"), 0)\r\n                label2 = cv2.imread(image_name.replace(\"img\", \"lane\").replace(\".jpg\", \".png\"), 0)\r\n            else:\r\n                label1 = cv2.imread(image_name.replace(\"img/content/train_p1_unlabeled\", \"da\").replace(\".jpg\", \".png\"), 0)\r\n                label2 = cv2.imread(image_name.replace(\"img/content/train_p1_unlabeled\", \"ll\").replace(\".jpg\", \".png\"), 0)\r\n\r\n        if not self.valid:\r\n            if random.random()<0.5:\r\n                combination = (image, label1, label2)\r\n                (image, label1, label2)= random_perspective(\r\n                    combination=combination,\r\n                    degrees=10,\r\n                    translate=0.1,\r\n                    scale=0.25,\r\n                    shear=0.0\r\n                )\r\n            if random.random()<0.5:\r\n                augment_hsv(image)\r\n            if random.random() < 0.5:\r\n                image = np.fliplr(image)\r\n                label1 = np.fliplr(label1)\r\n                label2 = np.fliplr(label2)\r\n\r\n        label1 = cv2.resize(label1, (W_, H_))\r\n        label2 = cv2.resize(label2, (W_, H_))\r\n        image = cv2.resize(image, (W_, H_))\r\n\r\n        _,seg_b1 = cv2.threshold(label1,1,255,cv2.THRESH_BINARY_INV)\r\n        _,seg_b2 = cv2.threshold(label2,1,255,cv2.THRESH_BINARY_INV)\r\n        _,seg1 = cv2.threshold(label1,1,255,cv2.THRESH_BINARY)\r\n        _,seg2 = cv2.threshold(label2,1,255,cv2.THRESH_BINARY)\r\n\r\n        seg1 = self.Tensor(seg1)\r\n        seg2 = self.Tensor(seg2)\r\n        seg_b1 = self.Tensor(seg_b1)\r\n        seg_b2 = self.Tensor(seg_b2)\r\n        seg_da = torch.stack((seg_b1[0], seg1[0]),0)\r\n        seg_ll = torch.stack((seg_b2[0], seg2[0]),0)\r\n        # image = image[:, :, ::-1].transpose(2, 0, 1)\r\n        image = np.ascontiguousarray(image)\r\n\r\n        if self.transform is not None :\r\n            image = self.transform(image)\r\n\r\n        return image_name,image,(seg_da,seg_ll)\r\n\r\n\r\nclass UlabeledDataset(torch.utils.data.Dataset):\r\n    '''\r\n    Class to load the dataset\r\n    '''\r\n    def __init__(self, transform=None, engin='kaggle', data='IADD'):\r\n        '''\r\n        :param imList: image list (Note that these lists have been processed and pickled using the loadData.py)\r\n        :param labelList: label list (Note that these lists have been processed and pickled using the loadData.py)\r\n        :param transform: Type of transformation. SEe Transforms.py for supported transformations\r\n        '''\r\n\r\n        self.transform = transform\r\n        self.Tensor = transforms.ToTensor()\r\n        self.data=data\r\n        self.engin=engin\r\n        if self.engin == 'kaggle':\r\n            self.root='/kaggle/working/iadd/img/content/train_p1_unlabeled'\r\n            self.names=os.listdir(self.root)\r\n        else:\r\n            self.root='/content/iadd/img/content/train_p1_unlabeled'\r\n            self.names=os.listdir(self.root)\r\n\r\n    def __len__(self):\r\n        return len(self.names)\r\n\r\n    def __getitem__(self, idx):\r\n        '''\r\n        :param idx: Index of the image file\r\n        :return: returns the image and corresponding label file.\r\n        '''\r\n        W_ = 512\r\n        H_ = 512\r\n        image_name = os.path.join(self.root,self.names[idx])\r\n\r\n        image = cv2.imread(image_name)\r\n        shape = image.shape\r\n        image = cv2.resize(image, (W_, H_))\r\n\r\n        # image = image[:, :, ::-1].transpose(2, 0, 1)\r\n        image = np.ascontiguousarray(image)\r\n\r\n        if self.transform is not None :\r\n            image = self.transform(image)\r\n\r\n        return image_name, image, shape
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataSet.py b/DataSet.py
--- a/DataSet.py	
+++ b/DataSet.py	
@@ -160,17 +160,17 @@
         elif self.data == 'IADD':
             if self.engin == 'kaggle':  #IADD dataset on kaggle engine
                 if valid:
-                    self.root = '/kaggle/working/IADD/IADDv6/val/img'
+                    self.root = '/kaggle/working/IADD/IADDv7/IADD.v7i/val/img'
                     self.names = os.listdir(self.root)
                 else:
-                    self.root = '/kaggle/working/iadd/img/content/train_p1_unlabeled'
-                    self.names = os.listdir(self.root)[:1000]
+                    self.root = '/kaggle/working/IADD/IADDv7/IADD.v7i/train/img'
+                    self.names = os.listdir(self.root)
             else:                        #IADD dataset on colab engine
                 if valid:
-                    self.root = '/content/IADD/IADDv6/val/img'
+                    self.root = '/content/IADD/IADDv7/IADD.v7i/val/img'
                     self.names = os.listdir(self.root)
                 else:
-                    self.root = '/content/iadd/img/content/train_p1_unlabeled'
+                    self.root = '/content/IADD/IADDv7/IADD.v7i/train/img'
                     self.names = os.listdir(self.root)#[:1000]
 
 
@@ -196,12 +196,8 @@
                 label1 = cv2.imread(image_name.replace("bdd100k/bdd100k/images/100k", "labels/bdd_seg_gt").replace("jpg", "png"), 0)
                 label2 = cv2.imread(image_name.replace("bdd100k/bdd100k/images/100k", "labels/bdd_lane_gt").replace("jpg", "png"), 0)
         elif self.data == 'IADD':
-            if self.valid:
-                label1 = cv2.imread(image_name.replace("img", "drivable").replace(".jpg", ".png"), 0)
-                label2 = cv2.imread(image_name.replace("img", "lane").replace(".jpg", ".png"), 0)
-            else:
-                label1 = cv2.imread(image_name.replace("img/content/train_p1_unlabeled", "da").replace(".jpg", ".png"), 0)
-                label2 = cv2.imread(image_name.replace("img/content/train_p1_unlabeled", "ll").replace(".jpg", ".png"), 0)
+            label1 = cv2.imread(image_name.replace("img", "drivable").replace(".jpg", ".png"), 0)
+            label2 = cv2.imread(image_name.replace("img", "lane").replace(".jpg", ".png"), 0)
 
         if not self.valid:
             if random.random()<0.5:
@@ -243,49 +239,3 @@
 
         return image_name,image,(seg_da,seg_ll)
 
-
-class UlabeledDataset(torch.utils.data.Dataset):
-    '''
-    Class to load the dataset
-    '''
-    def __init__(self, transform=None, engin='kaggle', data='IADD'):
-        '''
-        :param imList: image list (Note that these lists have been processed and pickled using the loadData.py)
-        :param labelList: label list (Note that these lists have been processed and pickled using the loadData.py)
-        :param transform: Type of transformation. SEe Transforms.py for supported transformations
-        '''
-
-        self.transform = transform
-        self.Tensor = transforms.ToTensor()
-        self.data=data
-        self.engin=engin
-        if self.engin == 'kaggle':
-            self.root='/kaggle/working/iadd/img/content/train_p1_unlabeled'
-            self.names=os.listdir(self.root)
-        else:
-            self.root='/content/iadd/img/content/train_p1_unlabeled'
-            self.names=os.listdir(self.root)
-
-    def __len__(self):
-        return len(self.names)
-
-    def __getitem__(self, idx):
-        '''
-        :param idx: Index of the image file
-        :return: returns the image and corresponding label file.
-        '''
-        W_ = 512
-        H_ = 512
-        image_name = os.path.join(self.root,self.names[idx])
-
-        image = cv2.imread(image_name)
-        shape = image.shape
-        image = cv2.resize(image, (W_, H_))
-
-        # image = image[:, :, ::-1].transpose(2, 0, 1)
-        image = np.ascontiguousarray(image)
-
-        if self.transform is not None :
-            image = self.transform(image)
-
-        return image_name, image, shape
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"7e27571b-ca55-4a02-ae51-2758e7b03021\" name=\"Changes\" comment=\"change pbar\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"MMD-adaption\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;kimik76&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/kimik76/TwinLiteNet.git&quot;,\r\n    &quot;accountId&quot;: &quot;c41fae36-3041-4477-ac7a-fff3cff2e008&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2flh8oWpYhEtfkCZoqUX9IiXkZw\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.Discriminator.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.inference.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.loss.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;Discriminator__adaption&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/study/semester4/TwinLiteNet&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\acer\\Desktop\\TwinLiteNet\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\acer\\Desktop\\TwinLiteNet\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.Discriminator\">\r\n    <configuration name=\"Discriminator\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TwinLiteNet\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/model\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/model/Discriminator.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"inference\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TwinLiteNet\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/inference.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"loss\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TwinLiteNet\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/loss.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.Discriminator\" />\r\n        <item itemvalue=\"Python.loss\" />\r\n        <item itemvalue=\"Python.inference\" />\r\n        <item itemvalue=\"Python.Discriminator\" />\r\n        <item itemvalue=\"Python.loss\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-0509580d9d50-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.14494.241\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"7e27571b-ca55-4a02-ae51-2758e7b03021\" name=\"Changes\" comment=\"\" />\r\n      <created>1714381415492</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1714381415492</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00071\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715760618765</created>\r\n      <option name=\"number\" value=\"00071\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00071\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715760618765</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00072\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715760666841</created>\r\n      <option name=\"number\" value=\"00072\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00072\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715760666841</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00073\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715760787315</created>\r\n      <option name=\"number\" value=\"00073\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00073\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715760787315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00074\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715761021116</created>\r\n      <option name=\"number\" value=\"00074\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00074\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715761021116</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00075\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715761168024</created>\r\n      <option name=\"number\" value=\"00075\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00075\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715761168024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00076\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715761834458</created>\r\n      <option name=\"number\" value=\"00076\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00076\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715761834458</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00077\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715765940654</created>\r\n      <option name=\"number\" value=\"00077\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00077\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715765940656</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00078\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715768479572</created>\r\n      <option name=\"number\" value=\"00078\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00078\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715768479572</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00079\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715768814214</created>\r\n      <option name=\"number\" value=\"00079\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00079\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715768814214</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00080\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715769188282</created>\r\n      <option name=\"number\" value=\"00080\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00080\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715769188282</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00081\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715774293223</created>\r\n      <option name=\"number\" value=\"00081\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00081\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715774293223</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00082\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715780435878</created>\r\n      <option name=\"number\" value=\"00082\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00082\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715780435878</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00083\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716296823277</created>\r\n      <option name=\"number\" value=\"00083\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00083\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716296823277</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00084\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716299164058</created>\r\n      <option name=\"number\" value=\"00084\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00084\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716299164058</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00085\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716299291839</created>\r\n      <option name=\"number\" value=\"00085\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00085\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716299291839</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00086\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716299563764</created>\r\n      <option name=\"number\" value=\"00086\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00086\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716299563764</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00087\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716299652248</created>\r\n      <option name=\"number\" value=\"00087\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00087\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716299652248</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00088\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716299809283</created>\r\n      <option name=\"number\" value=\"00088\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00088\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716299809283</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00089\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716300073584</created>\r\n      <option name=\"number\" value=\"00089\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00089\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716300073587</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00090\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716300295498</created>\r\n      <option name=\"number\" value=\"00090\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00090\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716300295498</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00091\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716300630656</created>\r\n      <option name=\"number\" value=\"00091\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00091\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716300630656</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00092\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716300709360</created>\r\n      <option name=\"number\" value=\"00092\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00092\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716300709360</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00093\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716300758476</created>\r\n      <option name=\"number\" value=\"00093\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00093\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716300758476</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00094\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716301214110</created>\r\n      <option name=\"number\" value=\"00094\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00094\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716301214110</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00095\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716301292344</created>\r\n      <option name=\"number\" value=\"00095\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00095\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716301292344</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00096\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716320976169</created>\r\n      <option name=\"number\" value=\"00096\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00096\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716320976170</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00097\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716325752512</created>\r\n      <option name=\"number\" value=\"00097\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00097\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716325752512</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00098\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716450754361</created>\r\n      <option name=\"number\" value=\"00098\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00098\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716450754361</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00099\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716453167266</created>\r\n      <option name=\"number\" value=\"00099\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00099\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716453167267</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00100\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716453370496</created>\r\n      <option name=\"number\" value=\"00100\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00100\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716453370497</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00101\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716455171107</created>\r\n      <option name=\"number\" value=\"00101\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00101\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716455171107</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00102\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716718564206</created>\r\n      <option name=\"number\" value=\"00102\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00102\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716718564208</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00103\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716718658199</created>\r\n      <option name=\"number\" value=\"00103\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00103\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716718658199</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00104\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716728445007</created>\r\n      <option name=\"number\" value=\"00104\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00104\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716728445007</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00105\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716729611209</created>\r\n      <option name=\"number\" value=\"00105\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00105\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716729611209</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00106\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716729725247</created>\r\n      <option name=\"number\" value=\"00106\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00106\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716729725247</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00107\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716731067134</created>\r\n      <option name=\"number\" value=\"00107\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00107\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716731067134</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00108\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716731087287</created>\r\n      <option name=\"number\" value=\"00108\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00108\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716731087287</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00109\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716731243547</created>\r\n      <option name=\"number\" value=\"00109\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00109\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716731243547</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00110\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716731288723</created>\r\n      <option name=\"number\" value=\"00110\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00110\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716731288723</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00111\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716731387603</created>\r\n      <option name=\"number\" value=\"00111\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00111\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716731387603</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00112\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716731792867</created>\r\n      <option name=\"number\" value=\"00112\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00112\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716731792867</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00113\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716792301020</created>\r\n      <option name=\"number\" value=\"00113\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00113\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716792301020</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00114\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716809191434</created>\r\n      <option name=\"number\" value=\"00114\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00114\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716809191434</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00115\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716809442496</created>\r\n      <option name=\"number\" value=\"00115\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00115\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716809442497</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00116\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716881654354</created>\r\n      <option name=\"number\" value=\"00116\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00116\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716881654355</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00117\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716973143430</created>\r\n      <option name=\"number\" value=\"00117\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00117\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716973143430</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00118\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716986451550</created>\r\n      <option name=\"number\" value=\"00118\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00118\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716986451550</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00119\" summary=\"change pbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1717016966772</created>\r\n      <option name=\"number\" value=\"00119\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00119\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1717016966772</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"120\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"build_1\" />\r\n    <MESSAGE value=\"chert_update\" />\r\n    <MESSAGE value=\"change pbar\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"change pbar\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/loss.py</url>\r\n          <line>51</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,7 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="7e27571b-ca55-4a02-ae51-2758e7b03021" name="Changes" comment="change pbar">
+      <change afterPath="$PROJECT_DIR$/train_finetune.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataSet.py" beforeDir="false" afterPath="$PROJECT_DIR$/DataSet.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/train.py" beforeDir="false" afterPath="$PROJECT_DIR$/train.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/utils.py" beforeDir="false" afterPath="$PROJECT_DIR$/utils.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -22,7 +26,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="MMD-adaption" />
+        <entry key="$PROJECT_DIR$" value="Discriminator_adaption" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -53,7 +57,7 @@
     &quot;Python.inference.executor&quot;: &quot;Run&quot;,
     &quot;Python.loss.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;Discriminator__adaption&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;fine-tune&quot;,
     &quot;last_opened_file_path&quot;: &quot;D:/study/semester4/TwinLiteNet&quot;,
     &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
   }
